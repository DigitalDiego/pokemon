{"version":3,"sources":["Pokemon.js","PokemonLogo.png","App.js","reportWebVitals.js","index.js"],"names":["Pokemon","name","set","image","className","src","alt","App","useState","pokemon","setPokemon","search","setSearch","useEffect","axios","get","then","res","data","catch","error","console","log","filteredPokemon","filter","item","toLowerCase","includes","Logo","type","placeholder","onChange","event","target","value","map","images","small","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAgBeA,EAdC,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,IAAKC,EAAW,EAAXA,MACzB,OACI,sBAAKC,UAAU,iBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BH,IAC9B,qBAAIG,UAAU,eAAd,kBAAmCF,QAEvC,qBAAKE,UAAU,kBAAf,SACI,qBAAKA,UAAU,gBAAgBC,IAAKF,EAAOG,IAAI,gBCVhD,MAA0B,wCCmC1BC,G,MA9BH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACAC,qBAAU,WACRC,IAAMC,IAAN,sCACCC,MAAK,SAAAC,GACJP,EAAWO,EAAIC,KAAKA,SACnBC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,IACH,IAGMG,EAAkBd,EAAQe,QAAO,SAAAC,GAAI,OACzCA,EAAKxB,KAAKyB,cAAcC,SAAShB,EAAOe,kBAE1C,OACE,gCACE,mCACE,qBAAKrB,IAAKuB,EAAMtB,IAAI,QAAQF,UAAU,SACtC,uBAAOyB,KAAK,OAAOC,YAAY,UAAUC,SAV1B,SAACC,GACpBpB,EAAUoB,EAAMC,OAAOC,aAWrB,qBAAK9B,UAAU,YAAf,SACKmB,EAAgBY,KAAI,SAAAV,GAAI,OACvB,cAAC,EAAD,CAASxB,KAAMwB,EAAKxB,KAAMC,IAAKuB,EAAKvB,IAAID,KAAME,MAAOsB,EAAKW,OAAOC,kBChB9DC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.141a6456.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Pokemon.css'\r\nconst Pokemon = ({name, set, image}) => {\r\n    return (\r\n        <div className='card-container'>\r\n            <div className=\"desc\">\r\n                <h1 className='pokemon-name'>{name}</h1>\r\n                <h2 className='pokemon-type'>Set: {set}</h2>\r\n            </div>\r\n            <div className=\"image-container\">\r\n                <img className='pokemon-image' src={image} alt=\"image\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pokemon\r\n","export default __webpack_public_path__ + \"static/media/PokemonLogo.e61842b2.png\";","import React, {useState, useEffect} from 'react'\nimport axios from 'axios'\nimport Pokemon from './Pokemon'\nimport Logo from './PokemonLogo.png'\nimport './App.css'\nconst App = () => {\n  const [pokemon, setPokemon] = useState([]);\n  const [search, setSearch] = useState('');\n  useEffect(() => {\n    axios.get(`https://api.pokemontcg.io/v2/cards`)\n    .then(res => {\n      setPokemon(res.data.data)\n    }).catch(error => console.log(error))\n  }, []);\n  const handleChange = (event) => {\n    setSearch(event.target.value);\n  }\n  const filteredPokemon = pokemon.filter(item => (\n    item.name.toLowerCase().includes(search.toLowerCase())\n  ));\n  return (\n    <div>\n      <header>\n        <img src={Logo} alt=\"image\" className='logo'/>\n        <input type=\"text\" placeholder='Pokemon' onChange={handleChange}/>\n      </header>\n      <div className=\"container\">\n          {filteredPokemon.map(item => (\n            <Pokemon name={item.name} set={item.set.name} image={item.images.small}/>\n          ))}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}